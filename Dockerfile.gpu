# Base image - NVIDIA CUDA 12.6 with Ubuntu 22.04
FROM nvidia/cuda:12.6.0-runtime-ubuntu22.04

# Install system dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    python3 python3-pip python3-dev \
    libgl1 libglib2.0-0 libsm6 libxrender1 libxext6 \
    curl git build-essential cmake\
    && rm -rf /var/lib/apt/lists/*

# Set up Python and UV
RUN update-alternatives --install /usr/bin/python python /usr/bin/python3 1
COPY --from=ghcr.io/astral-sh/uv:latest /uv /uvx /bin/

# Set environment variables
ENV UV_COMPILE_BYTECODE=1 \
    UV_LINK_MODE=copy \
    PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    CUDA_HOME="/usr/local/cuda" \
    PATH="${CUDA_HOME}/bin:${PATH}" \
    LD_LIBRARY_PATH="${CUDA_HOME}/lib64:${LD_LIBRARY_PATH}"

# Set up project directory
WORKDIR /app

# Install project dependencies with GPU extras
RUN --mount=type=cache,target=/root/.cache/uv \
    --mount=type=bind,source=uv.lock,target=uv.lock \
    --mount=type=bind,source=pyproject.toml,target=pyproject.toml \
    uv sync --frozen --no-install-project --extra gpu

# Copy the application code
COPY . /app

# Create output directory for logs and results
RUN mkdir -p /app/output && chmod 777 /app/output

# Install the project with its dependencies
RUN --mount=type=cache,target=/root/.cache/uv \
    uv sync --frozen --extra gpu

# Place executables in the environment
ENV PATH="/app/.venv/bin:$PATH"

# Reset the entrypoint
ENTRYPOINT []

# Run the main application with GPU extras
CMD ["uv", "run", "--extra", "gpu", "main.py"]
